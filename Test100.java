/*===========================
  ■■■ 만년 달력 ■■■
============================*/

// ○ 다음과 같은 프로그램을 구현한다.

// 실행 예)
// 『연도』를 입력하세요 : 2021
// 『월』을 입력하세요 : 7
/*
	[ 2021년 7월 ]

  일 월 화 수 목 금 토
========================
               1  2  3
   4  5  6  7  8  9 10
  11 12 13 14 15 16 17
  18 19 20 21 22 23 24
  25 26 27 28 29 30 31
========================
계속하려면 아무 키나...

1년 1월 1일 월요일 날수 더하기
평년 윤년 확인하기
1일이 어떤 요일에 시작하는지
해당월에 며칠까지 있는지 이걸 어케하지
*/

/*
※ 문제 인식 및 분석

	- 서기 1년 1월 1일 : 월요일

	- 연도가 4의 배수이면서 100의 배수가 아니거나,
	  400의 배수이면 2월은 29일(윤년), 나머지 2월은 28일(평년)

	- 2021년 7월의 달력을 그린다고 가정하면
	  1. 1. 1 ~ 2021.6.30 까지의 전체 날 수를 구한다.
	  그 날 수에 +1 연산을 수행하면...(2021년 7월 1일의 요일 확인)
	  7월의 달력 그릴 준비 끝

	- 요일 = 전체날수 5 7
	  요일 = 0 → 일요일
		     1 → 월요일
		   	    :
*/

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

	
	
	/*
	// 주요 변수 선언
	int y,m,nal;
	int[] months = {31, 0, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
	String[] weekNames = {"일", "월", "화", "수", "목", "금", "토"};
	int day;		// 요일 담을 변수
	int[] days;		// 해당 월에 며칠이 있는지 담는 배열

	
	void input()
	{
		do
		{
			System.out.print("『연도』를 입력하세요 : ");
			y = sc.nextInt(); 
		}
		while (y<1);

		do
		{
			System.out.print("『월』을 입력하세요 : ");
			m = sc.nextInt();
		}
		while (m<1 || m>12);
	}

	void dd()
	{
		if (y%4==0 && y%100!=0 || y%400==0)
		{
			months[1]=29;
		}
		else
		{
			months[1]=28;
		}
		
		// 1년 1월 1일부터 입력받은 년도의 전년도 12월 31일까지 계산
		nal = (y-1)*365+(y-1)/4-(y-1)/100+(y-1)/400;

		// 1년 1월 1일부터 입력받은 월의 이전 월까지 계산
		for (int i=0; i<(m-1); i++)
		{
			nal += months[i];
		}

		day = months[m-1];		//day에 해당 월의 날수 담기

		days = new int[day];	//days배열 해당 월만큼 칸만들기

		for (int i=0; i<days.length; i++)	//days 며칠까지 들어가는지 
		{
			days[i] += i+1;
		}
		day = nal%7+1;

	}
	void print()
	{
		System.out.printf("   [ %d년 %d월 ]\n", y, m);
		System.out.print("일 월 화 수 목 금 토 \n");
		System.out.print("========================\n");

		for (int i=0; i<day; i++)
		{
			System.out.print(" ");
		}
		for (int i=0; i<days.length; i++)
		{
			System.out.printf("%3d", days[i]);

			if ((day+i+1)%7==0 && i!=days.length-1)
			{
				System.out.println();
			}
		}
		System.out.println();
		//첫번째줄 문제임 그 달의 1일이 어떤 요일인지.. 어케설정하지 요일 설정안해서 ㅠ 
	}
	*/


public class Test100
{
	public static void main(String[] args) throws IOException
	{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		// 배열 선언 및 초기화
		// 각 달이 담고있는 마지막 날짜(매 월의 최대 날짜)
		int[] days = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
		
		// 주요 변수 선언
		int nalsu, y, m, w;		//-- 날수, 년, 월, 요일
		
		do
		{
			System.out.print("『연도』를 입력하세요 : ");
			y = Integer.parseInt(br.readLine());
		}
		while (y<1);			// 음수 안되게

		do
		{
			System.out.print("『월』을 입력하세요   : ");
			m = Integer.parseInt(br.readLine());
		}
		while (m<1 || m>12);

		//-------------------------------여기까지 수행하면 유효한 연도, 월 입력한 상태

		// 입력받은 년도에 해당하는 2월의 마지막 날 계산
		if ((y%4==0 && y%100!=0) || y%400==0)		//-- 윤년이라면
		{
			days[1]=29;
		}
		else
		{
			days[1]=28;
		}
		//-- else 구문은
		//	 현재 days 배열의 1번째 요소가 기본적으로 28로 입력되어 있는 상태이기 때문에
		//	 생략이 가능한 구문이 된다.

		// 1년 1월 1일 ~ 입력받은년도 이전년도의 12월 31일까지의 날 수 계산
		nalsu = (y-1)*365+(y-1)/4-(y-1)/100+(y-1)/400;
		
		// 확인
		//System.out.println(nalsu);
		/*
		『연도』를 입력하세요 : 2019
		『월』을 입력하세요 : 5
		737059
		계속하려면 아무 키나 누르십시오 . . .
		-->> 1.1.1 ~ 2018.12.31까지 날수
		*/

		// 입력받은년도(해당년도) 1월 1일 ~ 입력한 월의 이전 월 까지의
		// 날 수 누적 연산
		// 즉, 위의 예에 따르면...
		// 2019년 1월 1일 ~ 2019년 4월 30일 까지의 날 수 누적하여
		// 기존 nalsu에 누적
		for (int i=0; i<(m-1); i++)	// 5월 알고싶으면 전 달 마지막 날까지 계산하는거라서 -1 해주는거임
		{
			nalsu += days[i];		//날수를 days 배열의 i번째 값
		}
		
		// 확인
		//System.out.println(nalsu);
		/*
		『연도』를 입력하세요 : 2019
		『월』을 입력하세요 : 5
		737179
		계속하려면 아무 키나 누르십시오 . . .
		-->> 1.1.1 ~ 2019.4.30까지 날수
		*/

		// 입력받은 월의 1일
		nalsu += 1;			// 날수를 1만큼 증가(날수가 입력받은 월의 전월 마지막날까지라서 +1하면 그 다음달 1일 나옴)

		// 확인
		//System.out.println(nalsu);
		/*
		『연도』를 입력하세요 : 2019
		『월』을 입력하세요 : 5
		737179
		계속하려면 아무 키나 누르십시오 . . .
		-->> 1.1.1 ~ 2019.5.1까지 날수
		*/

		//--------------------------------여기까지 수행하면 모든 날 수에 대한 종합 완료~!!!

		// 요일 산출
		// : 입력받은 월의 1일이 무슨 요일인지 확인하기 위한 연산
		w = nalsu%7;	//-- 0:일요일, 1:월요일, 2:화요일 ...
		
		// 확인
		//System.out.println(w);
		/*
		『연도』를 입력하세요 : 2019
		『월』을 입력하세요 : 5
		3
		계속하려면 아무 키나 누르십시오 . . .
		-->> 2019년 5월 1일은 수요일이다 라고 알려주는거
		*/

		// 출력(달력 그리기)
		System.out.println();
		System.out.println("\t [ " + y + "년" + m + "월 ]");
		System.out.println("  일  월  화  수  목  금  토");	//두 칸 공백
		System.out.println("============================");

		// 특정 요일부터 1일이 출발할 수 있도록 공백 발생(지정)
		for (int i=1; i<=w; i++)		//일요일은 공백 필요없고 월요일부터 공백 4칸씩 필요함 그래서 i가 1부터 시작
		{								//i<=w에서 w인 이유는 w = nalsu%7해서 무슨 요일인지 확인하기 위해
			System.out.print("    ");
		}

		//확인
		//System.out.printf("%4d", 1);	//하나의 요일 앞에 공백이 4칸씩 있어서 %4d함

		//해당 월(입력한 월)의 날짜만 출력될 수 있도록 반복문 구성
		for (int i=1; i<=days[m-1]; i++)	//배열 방 번호는 -1 해줘야해서 days 배열의 m-1값
		{
			System.out.printf("%4d", i);
			w++;							//-- 날짜가 증가하는 만큼 요일도 함께 증가할 수 있도록 처리

			if (w%7==0)	//일요일마다
			{
				System.out.println();	//개행
			}
		}

		// 달의 마지막 날짜가 출력 형식을 모두 채웠을 경우
		// 이미 일요일 개행이 이루어졌기 때문에
		// 이 경우에는 추가 개행을 하지 않도록 처리
		if (w%7!=0)		// 일요일마다 개행하라고 했기때문에 w가 7의 배수가 아닐때 개행하라고 처리
		{
			System.out.println();
		}
		

		System.out.println("============================");
			


	}
}