/*===================================
  ■■■ 컬렉션 (Collection) ■■■
===================================*/

import java.util.Vector;
import java.util.Collections;

public class Test155
{
	// 정적 문자열 배열 선언 및 초기화
	private static final String[] colors = {"검정", "노랑", "초록", "파랑", "빨강", "연두"};

	public static void main(String[] args)
	{
		// v 라는 Vector 자료구조 생성
		Vector<String> v = new Vector<String>();

		// v 라는 Vector 자료구조에 colors 요소 추가
		for (String color : colors)
		{
			v.add(color);
		}
		System.out.println("첫 번째 요소 : " + v.firstElement());
		System.out.println("두 번째 요소 : " + v.get(1));
		System.out.println("마지막 요소  : " + v.lastElement());
		System.out.println("요소의 갯수  : " + v.size());

		System.out.println();
		/*
		첫 번째 요소 : 검정
		두 번째 요소 : 노랑
		마지막 요소  : 연두
		요소의 갯수  : 6
		*/


		// ○ 첫 번째 요소를 『하양』으로 변경 → set()
		v.set(0, "하양");

		System.out.println("첫 번째 요소 : " + v.firstElement());
		System.out.println("두 번째 요소 : " + v.get(1));
		System.out.println("요소의 갯수  : " + v.size());
		System.out.println();
		/*
		첫 번째 요소 : 하양		하양으로 변경되고 밀린게 아니라 덮어져서 변경됨
		두 번째 요소 : 노랑
		요소의 갯수  : 6
		*/


		// ○ 첫 번째 요소에 『주황』추가 → insertElementAt()
		v.insertElementAt("주황", 0);

		System.out.println("첫 번째 요소 : " + v.firstElement());
		System.out.println("두 번째 요소 : " + v.get(1));
		System.out.println("요소의 갯수  : " + v.size());
		System.out.println();
		/*
		첫 번째 요소 : 주황
		두 번째 요소 : 하양		주황이 첫번째로 들어오고 뒤로 다 밀림
		요소의 갯수  : 7
		*/

		
		// ○ 전체 출력
		System.out.print("전체 출력 : " );
		for (String str : v)		//for each문
		{
			System.out.print(str + " ");
		}
		System.out.println("\n");
		//--==>> 전체 출력 : 주황 하양 노랑 초록 파랑 빨강 연두


		// ○ 오름차순 정렬
		Collections.sort(v);

		// ○ 오름차순 정렬 이후 다시 전체 출력
		System.out.print("오름차순 정렬 이후 전체 출력 : " );
		for (String str : v)		//for each문
		{
			System.out.print(str + " ");
		}
		System.out.println("\n");
		//--==>> 오름차순 정렬 이후 전체 출력 : 노랑 빨강 연두 주황 초록 파랑 하양  
		//		 가나다라순으로 정렬됨

		
		// ○ 검색
		// 『Collections.binarySearch();』
		// 검색 기능 수행. 단, 오름차순 정렬된 자료에서만 사용 가능.
		// 검색 결과가 존재하지 않을 경우 음수를 반환한다.

		int idxBlue = Collections.binarySearch(v, "파랑");		//v Vector자료형에서 파랑 찾기
		System.out.printf("파랑 : %d번째 인덱스에 위치하고 있다.\n", idxBlue);
		System.out.println();
		//--==>> 파랑 : 5번째 인덱스에 위치하고 있다.
		// 현재 인덱스 구조 : 노랑 빨강 연두 주황 초록 파랑 하양  

		int idxPurple = Collections.binarySearch(v, "보라");
		System.out.printf("보라 : %d번째 인덱스에 위치하고 있다.\n", idxPurple);
		System.out.println();
		//--==>> 보라 : -2번째 인덱스에 위치하고 있다.
		// 검색 결과가 존재하지 않아서 음수로 반환된다.


		// ○ 내림차순 정렬
		Collections.sort(v, Collections.reverseOrder());

		// ○ 내림차순 정렬 이후 다시 전체 출력
		System.out.print("내림차순 정렬 이후 전체 출력 : " );
		for (String str : v)		//for each문
		{
			System.out.print(str + " ");
		}
		System.out.println("\n");
		//--==>> 내림차순 정렬 이후 전체 출력 : 하양 파랑 초록 주황 연두 빨강 노랑

		
		// ○ 내림차순 정렬 이후 파랑 검색
		idxBlue = Collections.binarySearch(v, "파랑");		//v Vector자료형에서 파랑 찾기
		System.out.printf("파랑 : %d번째 인덱스에 위치하고 있다.\n", idxBlue);
		System.out.println();
		//--==>> 파랑 : -8번째 인덱스에 위치하고 있다.
		// 인덱스값 있지만 내림차순 정렬이라서 검색 존재하지 않음. 음수로 반환
		

		// 다시 리버스해서 찾기는 가능한~!
		idxBlue = Collections.binarySearch(v, "파랑", Collections.reverseOrder());		//v Vector자료형에서 파랑 찾기
		System.out.printf("파랑 : %d번째 인덱스에 위치하고 있다.\n", idxBlue);
		System.out.println();
		//--==>> 파랑 : 1번째 인덱스에 위치하고 있다.




	}
}